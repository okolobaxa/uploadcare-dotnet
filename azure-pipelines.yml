trigger:
- master

stages:

- stage: 'Build'
  variables:
    buildConfiguration: 'Release'

  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'

    workspace:
      clean: all
      
    steps:
      - task: DotNetCoreCLI@2
        displayName: "NuGet Restore"
        inputs:
          command: restore
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: "Build Solution"
        inputs:
          command: build
          projects: '**/*.csproj'
          arguments: '--configuration $(buildConfiguration)'
    
      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          projects: 'Uploadcare.Tests/Uploadcare.Tests.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Create NuGet Package - Release Version'
        inputs:
          command: pack
          packDirectory: '$(Build.ArtifactStagingDirectory)/package'
          arguments: '--configuration $(buildConfiguration)'
          nobuild: true

      - publish: '$(Build.ArtifactStagingDirectory)/package'
        artifact: 'package'

      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx'

- stage: 'PublishReleaseNuGetPackage'
  displayName: 'Publish Release NuGet Package'
  dependsOn: 'PublishPrereleaseNuGetPackage'
  condition: succeeded()
  jobs:
  - deployment:
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'nugetorg'
    strategy:
     runOnce:
       deploy:
         steps:
         - task: NuGetCommand@2
           displayName: 'Push NuGet Package'
           inputs:
             command: 'push'
             packagesToPush: '$(Pipeline.Workspace)/package/*.nupkg'
             nuGetFeedType: 'external'
             publishFeedCredentials: 'nuget.org (Uploadcare)'